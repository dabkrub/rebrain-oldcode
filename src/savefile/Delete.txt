import React, { Component } from "react";
import {
  DayPilot,
  DayPilotCalendar,
  DayPilotNavigator,
} from "daypilot-pro-react";
import "../css/CalendarStyles.css";
import firebase from "../Firebase/firebase";

const styles = {
  wrap: {
    display: "flex",
    color: "red",
  },
  left: {
    marginRight: "10px",
  },
  main: {
    flexGrow: "1",
  },
};

class Calendar extends Component {
  constructor(props) {
    if (localStorage.getItem("isLogin") == 1) {
      console.log(localStorage.getItem("isLogin") + "Sucess");
    } else {
      console.log(localStorage.getItem("isLogin") + "Fail");
      props.history.push("/");
    }
    let newDate = new Date();
    let date = newDate.getDate();
    let month = newDate.getMonth() + 1;
    let year = newDate.getFullYear();
    //ตัวแปร วัน/เดือน/ปี // console.log("newDate",date+"-"+month+"-"+year);

    // if(month < 10){month = "0"+month;}else{month = month}
    month = month < 10 ? "0" + month : (month = month); //short if
    let DateToday = year + "-" + month + "-" + date;
    console.log("DateToday", DateToday);
    super(props);
    this.state = {
      viewType: "Week",
      durationBarVisible: false,
      timeRangeSelectedHandling: "Enabled",
      onTimeRangeSelected: (args) => {
        let dp = this.calendar;
        DayPilot.Modal.prompt("Create a new event:", "ระบุบตารางเวลา").then(
          function (modal) {
            dp.clearSelection();
            if (!modal.result) {
              return;
            }
            const fireAddRef = firebase.database().ref("Calendar");
            const fireAdd = {
              id: DayPilot.guid(),
              start: args.start,
              end: args.end,
              text: modal.result,
              doctor:
                "หมอเบียร์5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555",
              color: "#red",
            };
            fireAddRef.push(fireAdd);
          }
        );
      },

      eventDeleteHandling: "Update",
      dp: this.calendar,
      onEventClick: (args) => {
        let dp = this.calendar;
        DayPilot.Modal.prompt("Update event text:", args.e.text()).then(
          function (modal) {
            if (!modal.result) {
              return;
            }
            args.e.data.text = modal.result;
            dp.events.update(args.e);
          }
        );
      },
      onEventDelete: (args) => {
        const DeleteRef = firebase.database().ref("Calendar");
        DeleteRef.on("value", (snapshot) => {
          const todos = snapshot.val();
          const todoList = [];
          for (let id in todos) {
            todoList.push({ id, ...todos[id] });
            if(args.e.data.id == todos[id].id){
              DeleteRef.child(id).remove()
            }
          }
         
        });
      },
      year: new Date().getFullYear(),
      day: new Date().getDate(),
      isLogin: localStorage.getItem("isLogin"),
    };
  }

  componentDidMount() {
    const todoRef = firebase.database().ref("Calendar");
    todoRef.on("value", (snapshot) => {
      const todos = snapshot.val();
      const todoList = [];
      for (let id in todos) {
        todoList.push({ id, ...todos[id] });
      }

      let dp = this.calendar;
      for (let i in todoList) {
        dp.events.remove(
          new DayPilot.Event({
            start: todoList[i].start.value,
            end: todoList[i].end.value,
            id: todoList[i].id,
            text: todoList[i].text,
          })
        );
      }

      for (let i in todoList) {
        dp.events.add(
          new DayPilot.Event({
            start: todoList[i].start.value,
            end: todoList[i].end.value,
            id: todoList[i].id,
            text: todoList[i].text,
          })
        );
      }
    });
  }

  render() {
    var { ...config } = this.state;
    return (
      <div>
        <h1>Test Local {localStorage.getItem("isLogin")}</h1>
        <div style={styles.wrap}>
          <div style={styles.left}>
            <DayPilotNavigator
              selectMode={"week"}
              showMonths={1} // 2
              skipMonths={1}
              onTimeRangeSelected={(args) => {
                this.setState({
                  startDate: args.day,
                });
              }}
            />
          </div>
          <div style={styles.main}>
            <DayPilotCalendar
              {...config}
              ref={(component) => {
                this.calendar = component && component.control;
              }}
            />
          </div>
        </div>
      </div>
    );
  }
}

export default Calendar;
